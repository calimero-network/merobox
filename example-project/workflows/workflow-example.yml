description: A sample workflow that demonstrates the bootstrap functionality with dynamic value capture
name: Sample Calimero Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true

nodes:
  chain_id: testnet-1
  count: 2
  image: ghcr.io/calimero-network/merod:edge
  prefix: calimero-node
  base_port: 9000
  base_rpc_port: 9100

steps:
  # Step 1: Install the application on the first node
  # This captures the application ID for use in subsequent steps
  - name: Install Application on Node 1
    type: install_application
    node: calimero-node-1
    path: ./res/kv_store.wasm
    dev: true
    outputs:
      app_id: applicationId          # Export 'applicationId' field as 'app_id'

  # Step 2: Create a context using the installed application
  # Uses the captured application ID from step 1
  - name: Create Context on Node 1
    type: create_context
    node: calimero-node-1
    application_id: '{{app_id}}'
    outputs:
      context_id: contextId          # Export 'contextId' field as 'context_id'
      member_public_key: memberPublicKey  # Export 'memberPublicKey' as 'member_public_key'

  # Step 3: Generate an identity on the second node
  # This captures the public key for use in invitation and joining
  - name: Create Identity on Node 2
    type: create_identity
    node: calimero-node-2
    outputs:
      public_key: publicKey         # Export 'publicKey' as 'public_key'

  # Step 4: Wait for identity creation to complete
  - name: Wait for Identity Creation
    type: wait
    seconds: 5

  # Step 5: Invite the second node to join the context
  # Uses captured values: context ID, member public key, and identity public key
  - name: Invite Node 2 from Node 1
    type: invite_identity
    node: calimero-node-1
    context_id: '{{context_id}}'
    grantee_id: '{{public_key}}'
    granter_id: '{{member_public_key}}'
    capability: member
    outputs:
      invitation: invitation         # Export 'invitation' as 'invitation'

  # Step 6: Join the context from the second node
  # Uses captured values: context ID, invitee identity, and invitation data
  - name: Join Context from Node 2
    type: join_context
    node: calimero-node-2
    context_id: '{{context_id}}'
    invitee_id: '{{public_key}}'
    invitation: '{{invitation}}'

  # Step 7: Execute a contract call to set a key-value pair
  # Uses the member public key from the context as the executor
  - name: Execute Contract Call - Set Key-Value
    type: call
    node: calimero-node-1
    context_id: '{{context_id}}'
    executor_public_key: '{{member_public_key}}'
    method: set
    args:
      key: hello
      value: world
    outputs:
      set_result: result            # Export 'result' as 'set_result'

  # Step 8: Wait for the set operation to complete and propagate
  - name: Wait for Set Operation
    type: wait
    seconds: 3

  # Step 9: Execute a view call to retrieve the stored value
  # Demonstrates cross-node execution using the joined context
  - name: Execute View Call - Get Value
    type: call
    node: calimero-node-2
    context_id: '{{context_id}}'
    executor_public_key: '{{public_key}}'
    method: get
    args:
      key: hello
    outputs:
      get_result: result            # Export 'result' as 'get_result'

  # Step 10: Repeat a set of operations multiple times
  # Demonstrates the new repeat step functionality
  - name: Repeat Operations Multiple Times
    type: repeat
    count: 3
    outputs:
      current_iteration: iteration   # Export 'iteration' as 'current_iteration'
    steps:
      - name: Set Key-Value Pair
        type: call
        node: calimero-node-1
        context_id: '{{context_id}}'
        executor_public_key: '{{member_public_key}}'
        method: set
        args:
          key: "iteration_{{current_iteration}}"
          value: "value_{{current_iteration}}"
        outputs:
          iteration_set_result: result  # Export 'result' as 'iteration_set_result'
      
      - name: Wait for Set Operation
        type: wait
        seconds: 2
      
      - name: Get Key-Value Pair
        type: call
        node: calimero-node-2
        context_id: '{{context_id}}'
        executor_public_key: '{{public_key}}'
        method: get
        args:
          key: "iteration_{{current_iteration}}"
        outputs:
          iteration_get_result: result  # Export 'result' as 'iteration_get_result'

# Configuration options
stop_all_nodes: false   # Stop all nodes at the end of workflow
restart: false          # Don't restart nodes at the beginning of workflow
wait_timeout: 60
