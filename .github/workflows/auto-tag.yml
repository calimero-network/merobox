name: Auto Tag on Version Bump

on:
  push:
    branches:
      - master
    paths:
      - 'pyproject.toml'
      - 'merobox/__init__.py'

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to compare

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Extract current version from pyproject.toml
        id: current_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG="v${{ steps.current_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG does not exist"
          fi

      - name: Verify version matches in __init__.py
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          PYPROJECT_VERSION="${{ steps.current_version.outputs.version }}"
          INIT_VERSION=$(grep '^__version__ = ' merobox/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
          
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "merobox/__init__.py version: $INIT_VERSION"
          
          if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
            echo "‚ùå Version mismatch!"
            echo "pyproject.toml has $PYPROJECT_VERSION but __init__.py has $INIT_VERSION"
            exit 1
          fi
          
          echo "‚úÖ Versions match: $PYPROJECT_VERSION"

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG="v${{ steps.current_version.outputs.version }}"
          
          echo "Creating tag: $TAG"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$TAG" -m "Release $TAG (auto-tagged)"
          git push origin "$TAG"
          
          echo "‚úÖ Tag $TAG created and pushed!"
          echo "üöÄ This will trigger the release workflow automatically"

      - name: Comment on commit
        if: steps.check_tag.outputs.exists == 'false'
        uses: peter-evans/commit-comment@v3
        with:
          body: |
            üéâ **Auto-tagged release v${{ steps.current_version.outputs.version }}**
            
            The following automated workflows will now run:
            1. üî® Build binaries for all platforms
            2. üì¶ Create GitHub release
            3. üöÄ Publish to PyPI
            
            Monitor progress in the [Actions tab](https://github.com/${{ github.repository }}/actions)

