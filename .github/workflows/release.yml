name: Release Pipeline

on:
  push:
    branches:
      - master
      - 'feature/*'
      - 'release/*'
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  # Job 1: Build source distribution
  build-source:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build source distribution
      run: |
        python -m build --sdist --outdir dist

    - name: Upload source artifacts
      uses: actions/upload-artifact@v4
      with:
        name: source-distribution
        path: dist/*.tar.gz
        retention-days: 1

    - name: Test package installation (PR only)
      if: github.event_name == 'pull_request'
      run: |
        pip install -r requirements.txt
        pip install -e .
        merobox --version
        merobox --help

  # Job 2: Check version and determine if release needed
  check-version:
    name: Check version and determine if release needed
    runs-on: ubuntu-latest
    needs: [build-source]
    if: github.ref == 'refs/heads/master'
    outputs:
      current-version: ${{ steps.version.outputs.current_version }}
      version-bumped: ${{ steps.version.outputs.version_bumped }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get current version
      id: version
      run: |
        # Get current version from __init__.py
        CURRENT_VERSION=$(grep '^__version__ = ' merobox/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this version already exists as a release
        if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
          echo "Version v$CURRENT_VERSION already exists as a release"
          echo "version_bumped=false" >> $GITHUB_OUTPUT
        else
          echo "Version v$CURRENT_VERSION is new, proceeding with release"
          echo "version_bumped=true" >> $GITHUB_OUTPUT
        fi

  # Job 3: Build binaries for all platforms
  build-binaries:
    runs-on: ${{ matrix.os }}
    needs: check-version
    if: |
      always() &&
      (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/release/'))
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04-8cpu
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'


      - name: Install system dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install system dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: brew install gcc

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          # Build with PyInstaller on native workers
          pyinstaller --onefile --name merobox merobox/cli.py

      - name: Test executable
        run: |
          if [ -f "./dist/merobox" ]; then
            ./dist/merobox --version
          else
            echo "Binary not found in dist/"
            ls -la dist/
          fi

      - name: Verify architecture
        run: |
          file_output=$(file ./dist/merobox)
          echo "Binary architecture: $file_output"
          
          # Verify correct architecture based on target
          case "${{ matrix.target }}" in
            "aarch64-unknown-linux-gnu")
              if [[ "$file_output" == *"aarch64"* ]]; then
                echo "✅ Correct aarch64 architecture detected"
              else
                echo "❌ Expected aarch64, got: $file_output"
                exit 1
              fi
              ;;
            "x86_64-unknown-linux-gnu")
              if [[ "$file_output" == *"x86-64"* ]] || [[ "$file_output" == *"x86_64"* ]]; then
                echo "✅ Correct x86-64 architecture detected"
              else
                echo "❌ Expected x86-64, got: $file_output"
                exit 1
              fi
              ;;
            "aarch64-apple-darwin")
              if [[ "$file_output" == *"arm64"* ]]; then
                echo "✅ Correct arm64 architecture detected"
              else
                echo "❌ Expected arm64, got: $file_output"
                exit 1
              fi
              ;;
            "x86_64-apple-darwin")
              if [[ "$file_output" == *"x86_64"* ]]; then
                echo "✅ Correct x86_64 architecture detected"
              else
                echo "❌ Expected x86_64, got: $file_output"
                exit 1
              fi
              ;;
          esac

      - name: Determine version tag
        id: version
        shell: bash
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "tag=v${{ needs.check-version.outputs.current-version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ needs.check-version.outputs.current-version }}" >> $GITHUB_OUTPUT
          fi

      - name: Name artifact
        shell: bash
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          # Convert target to simpler naming convention
          case "${{ matrix.target }}" in
            "x86_64-unknown-linux-gnu")
              TARGET_NAME="linux-x86-64"
              ;;
            "aarch64-unknown-linux-gnu")
              TARGET_NAME="linux-aarch64"
              ;;
            "x86_64-apple-darwin")
              TARGET_NAME="darwin-x86-64"
              ;;
            "aarch64-apple-darwin")
              TARGET_NAME="darwin-aarch64"
              ;;
          esac
          NAME="merobox-${TAG}-${TARGET_NAME}"
          mv "dist/merobox" "dist/${NAME}"

      - name: Generate checksum
        shell: bash
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          # Convert target to simpler naming convention
          case "${{ matrix.target }}" in
            "x86_64-unknown-linux-gnu")
              TARGET_NAME="linux-x86-64"
              ;;
            "aarch64-unknown-linux-gnu")
              TARGET_NAME="linux-aarch64"
              ;;
            "x86_64-apple-darwin")
              TARGET_NAME="darwin-x86-64"
              ;;
            "aarch64-apple-darwin")
              TARGET_NAME="darwin-aarch64"
              ;;
          esac
          FILE="dist/merobox-${TAG}-${TARGET_NAME}"
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${FILE}" > "${FILE}.sha256"
          else
            shasum -a 256 "${FILE}" | awk '{print $1 "  " FILENAME}' FILENAME="${FILE##dist/}" > "${FILE}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: merobox-${{ matrix.target }}
          path: |
            dist/merobox-*
          retention-days: 30

  # Job 4: Create GitHub Release
  create-release:
    needs: [check-version, build-binaries]
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.build-binaries.result == 'success' &&
      github.ref == 'refs/heads/master' &&
      needs.check-version.outputs.version-bumped == 'true'
    permissions:
      contents: write

    steps:
      - name: Determine version tag
        id: version
        run: |
          echo "tag=v${{ needs.check-version.outputs.current-version }}" >> $GITHUB_OUTPUT

      - name: Validate tag format
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format: $TAG"
            exit 1
          fi
          echo "✅ Valid tag: $TAG"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: merobox-*
          merge-multiple: true

      - name: Create and publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-source, check-version, create-release]
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.create-release.result == 'success'
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: source-distribution
        path: dist/

    - name: Verify source distribution
      run: |
        echo "Source distributions found:"
        ls -la dist/
        echo "Total source distribution count: $(ls dist/*.tar.gz 2>/dev/null | wc -l)"
        
        # Verify the source distribution
        for file in dist/*.tar.gz; do
          echo "Checking $file"
          tar -tzf "$file" | head -10
        done

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/

  # Job 6: Notify completion
  notify-completion:
    needs: [build-source, check-version, build-binaries, create-release, publish-pypi]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Report status
        run: |
          VERSION="${{ needs.check-version.outputs.current-version }}"
          echo "🎉 Release Pipeline Complete!"
          echo "Version: $VERSION"
          echo ""
          echo "Status:"
          echo "  Build Source: ${{ needs.build-source.result }}"
          echo "  Check Version: ${{ needs.check-version.result }}"
          echo "  Build Binaries: ${{ needs.build-binaries.result }}"
          echo "  Create Release: ${{ needs.create-release.result }}"
          echo "  Publish PyPI: ${{ needs.publish-pypi.result }}"
          echo ""
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "📦 Package: https://pypi.org/project/merobox/${VERSION}/"
            echo "📥 Release: https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"
          else
            echo "ℹ️  No release created (version may already exist or not on master branch)"
          fi

