name: Release Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  # Job 1: Build source distribution
  build-source:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build source distribution
      run: |
        python -m build --sdist --outdir dist

    - name: Upload source artifacts
      uses: actions/upload-artifact@v4
      with:
        name: source-distribution
        path: dist/*.tar.gz
        retention-days: 1

  # Job 2: Check if version was bumped
  check-version:
    name: Check if version was bumped
    runs-on: ubuntu-latest
    needs: [build-source]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: write
      actions: write
    outputs:
      version-bumped: ${{ steps.check.outputs.bumped }}
      current-version: ${{ steps.check.outputs.current_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check version changes
      id: check
      run: |
        # Get current version from __init__.py
        CURRENT_VERSION=$(grep '^__version__ = ' merobox/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Get previous version from git history
        PREVIOUS_VERSION=$(git show HEAD~1:merobox/__init__.py | grep '^__version__ = ' | sed 's/__version__ = "\(.*\)"/\1/' || echo "0.0.0")
        echo "Previous version: $PREVIOUS_VERSION"
        
        # Check if version was bumped
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version bumped from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "bumped=true" >> $GITHUB_OUTPUT
        else
          echo "No version change detected"
          echo "bumped=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push tag
      if: steps.check.outputs.bumped == 'true'
      run: |
        TAG="v${{ steps.check.outputs.current_version }}"
        
        # Check if tag already exists
        if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
          echo "⏭️  Tag $TAG already exists, skipping"
        else
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$TAG" -m "Release $TAG (auto-tagged)"
          git push origin "$TAG"
          
          echo "✅ Created and pushed tag: $TAG"
        fi

    - name: Comment on commit
      if: steps.check.outputs.bumped == 'true'
      uses: peter-evans/commit-comment@v3
      with:
        body: |
          🎉 **Auto-tagged release v${{ steps.check.outputs.current_version }}**
          
          Release pipeline is now running. Monitor: [Actions](https://github.com/${{ github.repository }}/actions)

  # Job 3: Build binaries for all platforms
  build-binaries:
    runs-on: ${{ matrix.os }}
    needs: check-version
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.check-version.outputs.version-bumped == 'true'
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x64
            target: darwin-x64
          - os: macos-latest
            arch: arm64
            target: darwin-arm64
          - os: ubuntu-latest
            arch: x64
            target: linux-x64
          - os: ubuntu-latest
            arch: arm64
            target: linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up QEMU (for ARM64)
        if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install gcc

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: pyinstaller --onefile --name merobox merobox/cli.py

      - name: Test executable
        run: ./dist/merobox --version

      - name: Determine version tag
        id: version
        shell: bash
        run: |
          echo "tag=v${{ needs.check-version.outputs.current-version }}" >> $GITHUB_OUTPUT

      - name: Name artifact
        shell: bash
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          NAME="merobox-${TAG}-${{ matrix.target }}"
          mv "dist/merobox" "dist/${NAME}"

      - name: Generate checksum
        shell: bash
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          FILE="dist/merobox-${TAG}-${{ matrix.target }}"
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${FILE}" > "${FILE}.sha256"
          else
            shasum -a 256 "${FILE}" | awk '{print $1 "  " FILENAME}' FILENAME="${FILE##dist/}" > "${FILE}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: merobox-${{ matrix.target }}
          path: |
            dist/merobox-${{ steps.version.outputs.tag }}-${{ matrix.target }}
            dist/merobox-${{ steps.version.outputs.tag }}-${{ matrix.target }}.sha256
          retention-days: 30

  # Job 4: Create GitHub Release
  create-release:
    needs: [check-version, build-binaries]
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.build-binaries.result == 'success' &&
      github.ref == 'refs/heads/master' &&
      needs.check-version.outputs.version-bumped == 'true'
    permissions:
      contents: write

    steps:
      - name: Determine version tag
        id: version
        run: |
          echo "tag=v${{ needs.check-version.outputs.current-version }}" >> $GITHUB_OUTPUT

      - name: Validate tag format
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format: $TAG"
            exit 1
          fi
          echo "✅ Valid tag: $TAG"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: merobox-*
          merge-multiple: true

      - name: Create and publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-source, check-version, create-release]
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.check-version.outputs.version-bumped == 'true' &&
      needs.create-release.result == 'success'
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: source-distribution
        path: dist/

    - name: Verify source distribution
      run: |
        echo "Source distributions found:"
        ls -la dist/
        echo "Total source distribution count: $(ls dist/*.tar.gz 2>/dev/null | wc -l)"
        
        # Verify the source distribution
        for file in dist/*.tar.gz; do
          echo "Checking $file"
          tar -tzf "$file" | head -10
        done

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/

  # Job 6: Notify completion
  notify-completion:
    needs: [build-source, check-version, build-binaries, create-release, publish-pypi]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Report status
        run: |
          VERSION="${{ needs.check-version.outputs.current-version }}"
          echo "🎉 Release Pipeline Complete!"
          echo "Version: $VERSION"
          echo ""
          echo "Status:"
          echo "  Build Source: ${{ needs.build-source.result }}"
          echo "  Check Version: ${{ needs.check-version.result }}"
          echo "  Build Binaries: ${{ needs.build-binaries.result }}"
          echo "  Create Release: ${{ needs.create-release.result }}"
          echo "  Publish PyPI: ${{ needs.publish-pypi.result }}"
          echo ""
          echo "📦 Package: https://pypi.org/project/merobox/${VERSION}/"
          echo "📥 Release: https://github.com/${{ github.repository }}/releases/tag/v${VERSION}"

