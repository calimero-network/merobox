name: CI - Format Check & Merobox Integration Testing

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check code formatting
        run: |
          make format-check

      - name: Show formatting differences on failure
        if: failure()
        run: |
          echo "‚ùå Code formatting check failed!"
          echo "üí° To fix locally, run: make format"
          echo "üìã Showing differences:"
          make format-check || true

  test-merobox:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install merobox in development mode
        run: |
          pip install -e .
      - name: Install merod binary
        run: |
          echo "Downloading latest merod binary..."

          # Get latest release version from GitHub API
          VERSION=$(curl -s https://api.github.com/repos/calimero-network/core/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Latest version: $VERSION"

          ARCH="x86_64"
          PLATFORM="unknown-linux-gnu"
          TARBALL="merod_${ARCH}-${PLATFORM}.tar.gz"
          DOWNLOAD_URL="https://github.com/calimero-network/core/releases/download/${VERSION}/${TARBALL}"

          # Download and extract
          curl -L -o "${TARBALL}" "${DOWNLOAD_URL}"
          tar -xzf "${TARBALL}"
          chmod +x merod

          # Move to a directory in PATH
          sudo mv merod /usr/local/bin/
          rm "${TARBALL}"

          # Verify installation
          merod --version
          echo "merod installed successfully!"

      - name: Test merobox CLI and workflow (PR - Essential workflows only)
        if: github.event_name == 'pull_request'
        run: |
          merobox --version
          merobox --help
          # Run only essential workflows on PRs for faster feedback
          ESSENTIAL_WORKFLOWS=(
            "workflow-examples/workflow-example.yml"
            "workflow-examples/workflow-auth-example.yml"
            "workflow-examples/workflow-proposals-example.yml"
            "workflow-examples/workflow-assert-example.yml"
          )
          for f in "${ESSENTIAL_WORKFLOWS[@]}"; do \
            echo "Running workflow: $f"; \
            merobox bootstrap run "$f" --verbose; \
            echo "Nuking merobox data between workflows..."; \
            merobox nuke -f || true; \
          done

      - name: Test merobox CLI and workflow (Master - All workflows)
        if: github.ref == 'refs/heads/master'
        run: |
          merobox --version
          merobox --help
          # Run all workflows on master for comprehensive testing
          for f in workflow-examples/*.yml; do \
            echo "Running workflow: $f"; \
            merobox bootstrap run "$f" --verbose; \
            echo "Nuking merobox data between workflows..."; \
            merobox nuke -f || true; \
          done

  test-merobox-integration:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Docker
        uses: docker/setup-buildx-action@v3

      - name: Start Docker daemon
        run: |
          sudo systemctl start docker
          sudo docker --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install merobox in development mode
        run: |
          pip install -e .

      - name: Install example project dependencies
        run: |
          cd example-project
          pip install -r requirements.txt

      - name: Run merobox integration tests
        run: |
          cd example-project
          echo "üß™ Running merobox integration test suite..."

          echo "üß™ Running merobox integration tests..."
          python -m pytest tests/test_merobox_integration.py -v --tb=short

          echo "‚úÖ All merobox integration tests completed successfully!"
          echo "üßπ Nuking merobox data after integration tests..."
          cd .. && merobox nuke -f || true
