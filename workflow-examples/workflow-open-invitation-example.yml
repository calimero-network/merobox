description: Open invitation workflow following e2e test pattern
name: Open Invitation Workflow

# Force pull Docker images even if they exist locally
force_pull_image: true

nodes:
  chain_id: testnet-1
  count: 3
  image: ghcr.io/calimero-network/merod:edge
  prefix: open-inv-node

steps:
  # Step 1: Install application (equivalent to applicationInstall with target: allMembers)
  - name: Install Application
    type: install_application
    node: open-inv-node-1
    url: "https://github.com/calimero-network/merobox-workflow-examples/raw/main/workflow-examples/res/kv_store.wasm"
    dev: true
    outputs:
      app_id: applicationId

  # Step 2: Create context (contextCreate)
  - name: Create Context
    type: create_context
    node: open-inv-node-1
    application_id: "{{app_id}}"
    outputs:
      context_id: contextId
      member_public_key: memberPublicKey

  # Step 3: Wait for context initialization to complete (wait for broadcast, 5000ms)
  - name: Wait for Context Initialization
    type: wait
    seconds: 5
    description: Wait for context initialization to complete

  # Step 4: Set initial value (call set with key="foo", value="bar" as inviter)
  - name: Set Initial Value
    type: call
    node: open-inv-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: set
    args:
      key: foo
      value: bar

  # Step 5: Verify initial value (call get with key="foo", expected="bar" as inviter)
  - name: Get Initial Value - Inviter
    type: call
    node: open-inv-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get
    args:
      key: foo
    outputs:
      get_result_initial: result

  - name: Assert Initial Value is 'bar'
    type: json_assert
    statements:
      - 'json_equal({{get_result_initial}}, {"output": "bar"})'

  # Step 6: Create identities for nodes 2 and 3 before open invitation
  - name: Create Identity on Node 2
    type: create_identity
    node: open-inv-node-2
    outputs:
      public_key_2: publicKey

  - name: Create Identity on Node 3
    type: create_identity
    node: open-inv-node-3
    outputs:
      public_key_3: publicKey

  # Step 7: Create open invitation (contextInviteJoinOpen equivalent)
  - name: Create Open Invitation
    type: invite_open
    node: open-inv-node-1
    context_id: "{{context_id}}"
    granter_id: "{{member_public_key}}"
    valid_for_blocks: 1000
    outputs:
      open_invitation: invitation

  # Step 8: Join nodes 2 and 3 using the open invitation
  - name: Join via Open Invitation - Node 2
    type: join_open
    node: open-inv-node-2
    invitee_id: "{{public_key_2}}"
    invitation: "{{open_invitation}}"
    outputs:
      joined_context_id_2: contextId
      joined_member_key_2: memberPublicKey

  - name: Join via Open Invitation - Node 3
    type: join_open
    node: open-inv-node-3
    invitee_id: "{{public_key_3}}"
    invitation: "{{open_invitation}}"
    outputs:
      joined_context_id_3: contextId
      joined_member_key_3: memberPublicKey

  # Step 9: Wait for consensus (wait for consensus, 5000ms)
  - name: Wait for Consensus
    type: wait
    seconds: 5
    description: Wait for gossipsub mesh formation + initial sync completion

  # Step 10: Verify all members can read initial state (call get key="foo", expected="bar", target: allMembers)
  # Verify Node 1 (inviter) can still read
  - name: Get State - Node 1 (Inviter)
    type: call
    node: open-inv-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get
    args:
      key: foo
    outputs:
      get_result_node1: result

  # Verify Node 2 can read
  - name: Get State - Node 2
    type: call
    node: open-inv-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key_2}}"
    method: get
    args:
      key: foo
    outputs:
      get_result_node2: result

  # Verify Node 3 can read
  - name: Get State - Node 3
    type: call
    node: open-inv-node-3
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key_3}}"
    method: get
    args:
      key: foo
    outputs:
      get_result_node3: result

  # Assert all members see initial value 'bar'
  - name: Assert All Members See Initial Value 'bar'
    type: json_assert
    statements:
      - 'json_equal({{get_result_node1}}, {"output": "bar"})'
      - 'json_equal({{get_result_node2}}, {"output": "bar"})'
      - 'json_equal({{get_result_node3}}, {"output": "bar"})'

  # Step 11: Update value (call set key="foo", value="baz" as inviter)
  - name: Update Value
    type: call
    node: open-inv-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: set
    args:
      key: foo
      value: baz

  # Step 12: Wait for broadcast (wait for broadcast, 5000ms)
  - name: Wait for Broadcast
    type: wait
    seconds: 5
    description: Wait exactly 5s for the broadcast to propagate

  # Step 13: Verify all members see the update (call get key="foo", expected="baz", target: allMembers)
  # Verify Node 1 (inviter) sees update
  - name: Get Update - Node 1 (Inviter)
    type: call
    node: open-inv-node-1
    context_id: "{{context_id}}"
    executor_public_key: "{{member_public_key}}"
    method: get
    args:
      key: foo
    outputs:
      get_update_node1: result

  # Verify Node 2 sees update
  - name: Get Update - Node 2
    type: call
    node: open-inv-node-2
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key_2}}"
    method: get
    args:
      key: foo
    outputs:
      get_update_node2: result

  # Verify Node 3 sees update
  - name: Get Update - Node 3
    type: call
    node: open-inv-node-3
    context_id: "{{context_id}}"
    executor_public_key: "{{public_key_3}}"
    method: get
    args:
      key: foo
    outputs:
      get_update_node3: result

  # Assert all members see updated value 'baz'
  - name: Assert All Members See Updated Value 'baz'
    type: json_assert
    statements:
      - 'json_equal({{get_update_node1}}, {"output": "baz"})'
      - 'json_equal({{get_update_node2}}, {"output": "baz"})'
      - 'json_equal({{get_update_node3}}, {"output": "baz"})'

# Configuration options
stop_all_nodes: false
restart: false
wait_timeout: 60
